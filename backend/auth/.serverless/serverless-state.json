{
  "service": {
    "service": "auth",
    "serviceObject": {
      "name": "auth"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-west-2",
      "stage": "dev",
      "memorySize": 256,
      "timeout": 15,
      "httpApi": {
        "cors": false
      },
      "environment": {
        "ALLOWED_ORIGINS": "https://beta.mylg.studio,https://mylg.studio,http://localhost:3000",
        "CORS_WILDCARD_HOSTS": "mylg.studio",
        "CORS_ALLOW_CREDENTIALS": "false",
        "CORS_DEFAULT_ORIGIN": "https://beta.mylg.studio",
        "USER_PROFILES_TABLE": "UserProfiles",
        "COGNITO_USER_POOL_ID": {
          "Ref": "CognitoUserPool"
        },
        "COGNITO_USER_POOL_NAME": "mylg-dev-users-west2",
        "COGNITO_USER_CLIENT_ID": {
          "Ref": "CognitoUserPoolClient"
        }
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:BatchGetItem",
                "dynamodb:Query",
                "dynamodb:DescribeTable"
              ],
              "Resource": "arn:aws:dynamodb:us-west-2:221025630675:table/UserProfiles"
            },
            {
              "Effect": "Allow",
              "Action": [
                "cognito-idp:InitiateAuth",
                "cognito-idp:AdminListGroupsForUser",
                "cognito-idp:AdminAddUserToGroup",
                "cognito-idp:AdminRemoveUserFromGroup"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}"
                }
              ]
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "PreTokenGenerationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/auth-dev-preTokenGeneration"
            }
          },
          "CognitoAuthorizerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/auth-dev-cognitoAuthorizer"
            }
          },
          "RefreshTokenLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/auth-dev-refreshToken"
            }
          },
          "UpdateRolesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/auth-dev-updateRoles"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "auth",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/auth-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/auth-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "auth",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "PreTokenGenerationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/auth/dev/1757540656944-2025-09-10T21:44:16.944Z/auth.zip"
              },
              "Handler": "preTokenGeneration.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "auth-dev-preTokenGeneration",
              "MemorySize": 256,
              "Timeout": 15,
              "Environment": {
                "Variables": {
                  "ALLOWED_ORIGINS": "https://beta.mylg.studio,https://mylg.studio,http://localhost:3000",
                  "CORS_WILDCARD_HOSTS": "mylg.studio",
                  "CORS_ALLOW_CREDENTIALS": "false",
                  "CORS_DEFAULT_ORIGIN": "https://beta.mylg.studio",
                  "USER_PROFILES_TABLE": "UserProfiles",
                  "COGNITO_USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
                  },
                  "COGNITO_USER_POOL_NAME": "mylg-dev-users-west2",
                  "COGNITO_USER_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_CLIENT_ID\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PreTokenGenerationLogGroup"
            ]
          },
          "CognitoAuthorizerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/auth/dev/1757540656944-2025-09-10T21:44:16.944Z/auth.zip"
              },
              "Handler": "cognitoAuthorizer.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "auth-dev-cognitoAuthorizer",
              "MemorySize": 256,
              "Timeout": 15,
              "Environment": {
                "Variables": {
                  "ALLOWED_ORIGINS": "https://beta.mylg.studio,https://mylg.studio,http://localhost:3000",
                  "CORS_WILDCARD_HOSTS": "mylg.studio",
                  "CORS_ALLOW_CREDENTIALS": "false",
                  "CORS_DEFAULT_ORIGIN": "https://beta.mylg.studio",
                  "USER_PROFILES_TABLE": "UserProfiles",
                  "COGNITO_USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
                  },
                  "COGNITO_USER_POOL_NAME": "mylg-dev-users-west2",
                  "COGNITO_USER_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_CLIENT_ID\"]"
                  },
                  "COGNITO_POOL_ID": {
                    "Ref": "CognitoUserPool"
                  },
                  "COGNITO_CLIENT_ID": {
                    "Ref": "CognitoUserPoolClient"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CognitoAuthorizerLogGroup"
            ]
          },
          "RefreshTokenLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/auth/dev/1757540656944-2025-09-10T21:44:16.944Z/auth.zip"
              },
              "Handler": "refreshToken.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "auth-dev-refreshToken",
              "MemorySize": 256,
              "Timeout": 15,
              "Environment": {
                "Variables": {
                  "ALLOWED_ORIGINS": "https://beta.mylg.studio,https://mylg.studio,http://localhost:3000",
                  "CORS_WILDCARD_HOSTS": "mylg.studio",
                  "CORS_ALLOW_CREDENTIALS": "false",
                  "CORS_DEFAULT_ORIGIN": "https://beta.mylg.studio",
                  "USER_PROFILES_TABLE": "UserProfiles",
                  "COGNITO_USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
                  },
                  "COGNITO_USER_POOL_NAME": "mylg-dev-users-west2",
                  "COGNITO_USER_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_CLIENT_ID\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-west-2:221025630675:layer:shared-utils:1"
              ]
            },
            "DependsOn": [
              "RefreshTokenLogGroup"
            ]
          },
          "UpdateRolesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/auth/dev/1757540656944-2025-09-10T21:44:16.944Z/auth.zip"
              },
              "Handler": "updateRoles.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "auth-dev-updateRoles",
              "MemorySize": 256,
              "Timeout": 15,
              "Environment": {
                "Variables": {
                  "ALLOWED_ORIGINS": "https://beta.mylg.studio,https://mylg.studio,http://localhost:3000",
                  "CORS_WILDCARD_HOSTS": "mylg.studio",
                  "CORS_ALLOW_CREDENTIALS": "false",
                  "CORS_DEFAULT_ORIGIN": "https://beta.mylg.studio",
                  "USER_PROFILES_TABLE": "UserProfiles",
                  "COGNITO_USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
                  },
                  "COGNITO_USER_POOL_NAME": "mylg-dev-users-west2",
                  "COGNITO_USER_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_CLIENT_ID\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-west-2:221025630675:layer:shared-utils:1"
              ]
            },
            "DependsOn": [
              "UpdateRolesLogGroup"
            ]
          },
          "PreTokenGenerationLambdaVersion06wBqIgBT4hhmTJIfFRtXfNAHCbc2KGPSbGT3oyNkbs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PreTokenGenerationLambdaFunction"
              },
              "CodeSha256": "b14qWSNvnEEoHm9yIp1gylCRswX8fhXtj0kUxGmyIXQ="
            }
          },
          "CognitoAuthorizerLambdaVersionpl8RoboVKqDDbPePIRM3ZtEsUYiKruMQ1wNfbf0Gss": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CognitoAuthorizerLambdaFunction"
              },
              "CodeSha256": "b14qWSNvnEEoHm9yIp1gylCRswX8fhXtj0kUxGmyIXQ="
            }
          },
          "RefreshTokenLambdaVersion8FkHJxekT5gOiGmolXADmSBxjUOvX7ScgF6ieGZl5SQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RefreshTokenLambdaFunction"
              },
              "CodeSha256": "b14qWSNvnEEoHm9yIp1gylCRswX8fhXtj0kUxGmyIXQ="
            }
          },
          "UpdateRolesLambdaVersioniPzGUxOoQG7y2us14UWsd8Vb2xmPRMN4dzc5FmGSus": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateRolesLambdaFunction"
              },
              "CodeSha256": "b14qWSNvnEEoHm9yIp1gylCRswX8fhXtj0kUxGmyIXQ="
            }
          },
          "CognitoUserPoolMylgdevuserswest2": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "mylg-dev-users-west2",
              "LambdaConfig": {
                "PreTokenGeneration": {
                  "Fn::GetAtt": [
                    "PreTokenGenerationLambdaFunction",
                    "Arn"
                  ]
                }
              }
            },
            "DependsOn": [
              "PreTokenGenerationLambdaFunction"
            ]
          },
          "PreTokenGenerationLambdaPermissionCognitoUserPoolMylgdevuserswest2TriggerSourcePreTokenGeneration": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PreTokenGenerationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "cognito-idp.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "CognitoUserPoolMylgdevuserswest2",
                  "Arn"
                ]
              }
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-auth",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "RefreshTokenLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RefreshTokenLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationRefreshToken": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RefreshTokenLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostAuthRefreshDashtoken": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /auth/refresh-token",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationRefreshToken"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationRefreshToken"
          },
          "UpdateRolesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateRolesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateRoles": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateRolesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostAuthUpdateDashroles": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /auth/update-roles",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateRoles"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateRoles"
          },
          "CognitoUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "mylg-dev-users-west2",
              "AliasAttributes": [
                "email"
              ],
              "AutoVerifiedAttributes": [
                "email"
              ],
              "UsernameConfiguration": {
                "CaseSensitive": false
              },
              "Policies": {
                "PasswordPolicy": {
                  "MinimumLength": 8,
                  "RequireUppercase": true,
                  "RequireLowercase": true,
                  "RequireNumbers": true,
                  "RequireSymbols": false
                }
              },
              "Schema": [
                {
                  "Name": "email",
                  "AttributeDataType": "String",
                  "Required": true,
                  "Mutable": true
                }
              ]
            }
          },
          "CognitoUserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": "auth-dev-client",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "GenerateSecret": false,
              "ExplicitAuthFlows": [
                "ALLOW_ADMIN_USER_PASSWORD_AUTH",
                "ALLOW_USER_PASSWORD_AUTH",
                "ALLOW_REFRESH_TOKEN_AUTH"
              ],
              "TokenValidityUnits": {
                "AccessToken": "hours",
                "IdToken": "hours",
                "RefreshToken": "days"
              },
              "AccessTokenValidity": 1,
              "IdTokenValidity": 1,
              "RefreshTokenValidity": 30
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-auth-dev-ServerlessDeploymentBucketName"
            }
          },
          "PreTokenGenerationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PreTokenGenerationLambdaVersion06wBqIgBT4hhmTJIfFRtXfNAHCbc2KGPSbGT3oyNkbs"
            },
            "Export": {
              "Name": "sls-auth-dev-PreTokenGenerationLambdaFunctionQualifiedArn"
            }
          },
          "CognitoAuthorizerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CognitoAuthorizerLambdaVersionpl8RoboVKqDDbPePIRM3ZtEsUYiKruMQ1wNfbf0Gss"
            },
            "Export": {
              "Name": "sls-auth-dev-CognitoAuthorizerLambdaFunctionQualifiedArn"
            }
          },
          "RefreshTokenLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RefreshTokenLambdaVersion8FkHJxekT5gOiGmolXADmSBxjUOvX7ScgF6ieGZl5SQ"
            },
            "Export": {
              "Name": "sls-auth-dev-RefreshTokenLambdaFunctionQualifiedArn"
            }
          },
          "UpdateRolesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateRolesLambdaVersioniPzGUxOoQG7y2us14UWsd8Vb2xmPRMN4dzc5FmGSus"
            },
            "Export": {
              "Name": "sls-auth-dev-UpdateRolesLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-auth-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-auth-dev-HttpApiUrl"
            }
          },
          "CognitoUserPoolId": {
            "Value": {
              "Ref": "CognitoUserPool"
            },
            "Export": {
              "Name": "auth-cognito-user-pool-id-dev"
            }
          },
          "CognitoUserPoolClientId": {
            "Value": {
              "Ref": "CognitoUserPoolClient"
            },
            "Export": {
              "Name": "auth-cognito-user-pool-client-id-dev"
            }
          },
          "CognitoUserPoolArn": {
            "Value": {
              "Fn::GetAtt": [
                "CognitoUserPool",
                "Arn"
              ]
            },
            "Export": {
              "Name": "auth-cognito-user-pool-arn-dev"
            }
          },
          "PreTokenGenerationArn": {
            "Value": {
              "Fn::GetAtt": [
                "PreTokenGenerationLambdaFunction",
                "Arn"
              ]
            },
            "Export": {
              "Name": "auth-preTokenGeneration-arn-dev"
            }
          },
          "CognitoAuthorizerArn": {
            "Value": {
              "Fn::GetAtt": [
                "CognitoAuthorizerLambdaFunction",
                "Arn"
              ]
            },
            "Export": {
              "Name": "auth-cognitoAuthorizer-arn-dev"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "env": {
        "ALLOWED_ORIGINS": "https://beta.mylg.studio,https://mylg.studio,http://localhost:3000",
        "CORS_WILDCARD_HOSTS": "mylg.studio",
        "CORS_ALLOW_CREDENTIALS": "false",
        "CORS_DEFAULT_ORIGIN": "https://beta.mylg.studio",
        "USER_PROFILES_TABLE": "UserProfiles",
        "INVITES_TABLE": "ProjectInvitations",
        "INVITES_BY_SENDER_INDEX": "senderId-index",
        "INVITES_BY_RECIPIENT_INDEX": "recipientId-index",
        "INBOX_TABLE": "Inbox",
        "MESSAGES_TABLE": "Messages",
        "PROJECT_MESSAGES_TABLE": "ProjectMessages",
        "NOTIFICATIONS_TABLE": "Notifications",
        "NOTIFICATIONS_BY_USER_INDEX": "userId-index",
        "PROJECTS_TABLE": "Projects",
        "TASKS_TABLE": "Tasks",
        "EVENTS_TABLE": "Events",
        "EVENTS_STARTAT_INDEX": "",
        "BUDGETS_TABLE": "Budgets",
        "BUDGET_ID_INDEX": "budgetId-index",
        "BUDGET_ITEM_ID_INDEX": "budgetItemId-index",
        "GALLERIES_TABLE": "Galleries",
        "GALLERIES_PROJECT_GSI": "projectId-index",
        "CONNECTIONS_TABLE": "Connections",
        "CONNECTIONS_USER_GSI": "userId-sessionId-index",
        "COGNITO_USER_POOL_ID": "us-west-2_HnSYpFGkd",
        "COGNITO_USER_POOL_NAME": "mylg-dev-users-west2",
        "COGNITO_USER_CLIENT_ID": "3327sdro74vci7hbqsn5g74fvh",
        "SCANS_ALLOWED": "false"
      }
    },
    "pluginsData": {},
    "functions": {
      "preTokenGeneration": {
        "handler": "preTokenGeneration.handler",
        "events": [
          {
            "cognitoUserPool": {
              "pool": "mylg-dev-users-west2",
              "trigger": "PreTokenGeneration",
              "existing": false
            }
          }
        ],
        "name": "auth-dev-preTokenGeneration",
        "package": {},
        "memory": 256,
        "timeout": 15,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "PreTokenGenerationLambdaVersion06wBqIgBT4hhmTJIfFRtXfNAHCbc2KGPSbGT3oyNkbs"
      },
      "cognitoAuthorizer": {
        "handler": "cognitoAuthorizer.handler",
        "environment": {
          "COGNITO_POOL_ID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CognitoAuthorizerLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"COGNITO_POOL_ID\"]"
          },
          "COGNITO_CLIENT_ID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CognitoAuthorizerLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"COGNITO_CLIENT_ID\"]"
          }
        },
        "events": [],
        "name": "auth-dev-cognitoAuthorizer",
        "package": {},
        "memory": 256,
        "timeout": 15,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CognitoAuthorizerLambdaVersionpl8RoboVKqDDbPePIRM3ZtEsUYiKruMQ1wNfbf0Gss"
      },
      "refreshToken": {
        "handler": "refreshToken.handler",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RefreshTokenLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "events": [
          {
            "httpApi": {
              "path": "/auth/refresh-token",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/auth/refresh-token"
          }
        ],
        "name": "auth-dev-refreshToken",
        "package": {},
        "memory": 256,
        "timeout": 15,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RefreshTokenLambdaVersion8FkHJxekT5gOiGmolXADmSBxjUOvX7ScgF6ieGZl5SQ"
      },
      "updateRoles": {
        "handler": "updateRoles.handler",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateRolesLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "events": [
          {
            "httpApi": {
              "path": "/auth/update-roles",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/auth/update-roles"
          }
        ],
        "name": "auth-dev-updateRoles",
        "package": {},
        "memory": 256,
        "timeout": 15,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateRolesLambdaVersioniPzGUxOoQG7y2us14UWsd8Vb2xmPRMN4dzc5FmGSus"
      }
    },
    "resources": {
      "Resources": {
        "CognitoUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "mylg-dev-users-west2",
            "AliasAttributes": [
              "email"
            ],
            "AutoVerifiedAttributes": [
              "email"
            ],
            "UsernameConfiguration": {
              "CaseSensitive": false
            },
            "Policies": {
              "PasswordPolicy": {
                "MinimumLength": 8,
                "RequireUppercase": true,
                "RequireLowercase": true,
                "RequireNumbers": true,
                "RequireSymbols": false
              }
            },
            "Schema": [
              {
                "Name": "email",
                "AttributeDataType": "String",
                "Required": true,
                "Mutable": true
              }
            ]
          }
        },
        "CognitoUserPoolClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "ClientName": "auth-dev-client",
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            },
            "GenerateSecret": false,
            "ExplicitAuthFlows": [
              "ALLOW_ADMIN_USER_PASSWORD_AUTH",
              "ALLOW_USER_PASSWORD_AUTH",
              "ALLOW_REFRESH_TOKEN_AUTH"
            ],
            "TokenValidityUnits": {
              "AccessToken": "hours",
              "IdToken": "hours",
              "RefreshToken": "days"
            },
            "AccessTokenValidity": 1,
            "IdTokenValidity": 1,
            "RefreshTokenValidity": 30
          }
        }
      },
      "Outputs": {
        "CognitoUserPoolId": {
          "Value": {
            "Ref": "CognitoUserPool"
          },
          "Export": {
            "Name": "auth-cognito-user-pool-id-dev"
          }
        },
        "CognitoUserPoolClientId": {
          "Value": {
            "Ref": "CognitoUserPoolClient"
          },
          "Export": {
            "Name": "auth-cognito-user-pool-client-id-dev"
          }
        },
        "CognitoUserPoolArn": {
          "Value": {
            "Fn::GetAtt": [
              "CognitoUserPool",
              "Arn"
            ]
          },
          "Export": {
            "Name": "auth-cognito-user-pool-arn-dev"
          }
        },
        "PreTokenGenerationArn": {
          "Value": {
            "Fn::GetAtt": [
              "PreTokenGenerationLambdaFunction",
              "Arn"
            ]
          },
          "Export": {
            "Name": "auth-preTokenGeneration-arn-dev"
          }
        },
        "CognitoAuthorizerArn": {
          "Value": {
            "Fn::GetAtt": [
              "CognitoAuthorizerLambdaFunction",
              "Arn"
            ]
          },
          "Export": {
            "Name": "auth-cognitoAuthorizer-arn-dev"
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "auth",
      "frameworkVersion": "3",
      "useDotenv": true,
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "package": {
        "patterns": [
          "*.mjs",
          "!**/*.map",
          "!node_modules/.bin/**"
        ],
        "artifactsS3KeyDirname": "serverless/auth/dev/code-artifacts",
        "artifact": "D:\\MYLG\\App\\v1.2-mylg\\backend\\auth\\.serverless\\auth.zip",
        "artifactDirectoryName": "serverless/auth/dev/1757540656944-2025-09-10T21:44:16.944Z"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "D:\\MYLG\\App\\v1.2-mylg\\backend\\auth\\.serverless\\auth.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/auth/dev/1757540656944-2025-09-10T21:44:16.944Z",
    "artifact": "auth.zip"
  }
}