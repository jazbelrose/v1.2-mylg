service: auth
frameworkVersion: '3'

custom:
  env: ${file(../serverless.common.yml):env}

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-2
  stage: ${opt:stage, 'dev'}
  memorySize: 256
  timeout: 15
  httpApi:
    cors: false  # dynamic CORS handled in Lambda
  environment:
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    COGNITO_USER_POOL_NAME: ${env:COGNITO_USER_POOL_NAME}
    COGNITO_USER_CLIENT_ID: ${env:COGNITO_USER_CLIENT_ID}

    # Tables & shared config (CORS, etc.)
    ${self:custom.env}

  iam:
    role:
      statements:
        # preTokenGeneration only needs to read UserProfiles
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:BatchGetItem
            - dynamodb:Query
            - dynamodb:DescribeTable
          Resource:
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${env:USER_PROFILES_TABLE}
        - Effect: Allow
          Action:
            - cognito-idp:InitiateAuth
            - cognito-idp:AdminListGroupsForUser
            - cognito-idp:AdminAddUserToGroup
            - cognito-idp:AdminRemoveUserFromGroup
          Resource:
            - arn:aws:cognito-idp:${aws:region}:${aws:accountId}:userpool/${self:provider.environment.COGNITO_USER_POOL_ID}

functions:
  # 1) Cognito Pre-Token Generation (adds role/claims)
  preTokenGeneration:
    handler: triggers/preTokenGeneration.handler
    events:
      - cognitoUserPool:
          # Bind to EXISTING pool; provide the name via env var
          pool: ${self:provider.environment.COGNITO_USER_POOL_NAME}
          trigger: PreTokenGeneration
          existing: true

  # 2) Lambda authorizer used by the **WebSocket $connect** route (deployed here, *referenced* by ws stack)
  cognitoAuthorizer:
    handler: triggers/cognitoAuthorizer.handler
    environment:
      COGNITO_POOL_ID: ${self:provider.environment.COGNITO_USER_POOL_ID}
      COGNITO_CLIENT_ID: ${self:provider.environment.COGNITO_USER_CLIENT_ID}

  refreshToken:
    handler: routes/refreshToken.handler
    layers:
      - ${cf:shared-layer-${sls:stage}.SharedUtilsLayerArn}
    events:
      - httpApi:
          path: /auth/refresh-token
          method: POST

  updateRoles:
    handler: routes/updateRoles.handler
    layers:
      - ${cf:shared-layer-${sls:stage}.SharedUtilsLayerArn}
    events:
      - httpApi:
          path: /auth/update-roles
          method: POST

package:
  patterns:
    - triggers/**
    - routes/**
    - '!**/*.map'
    - '!node_modules/.bin/**'

resources:
  Outputs:
    PreTokenGenerationArn:
      Value:
        Fn::GetAtt: [ PreTokenGenerationLambdaFunction, Arn ]
      Export:
        Name: auth-preTokenGeneration-arn-${sls:stage}

    CognitoAuthorizerArn:
      Value:
        Fn::GetAtt: [ CognitoAuthorizerLambdaFunction, Arn ]
      Export:
        Name: auth-cognitoAuthorizer-arn-${sls:stage}
