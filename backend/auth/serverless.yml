service: auth
frameworkVersion: '3'

useDotenv: true

custom:
  env: ${file(../serverless.common.yml):env}

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-2  # Auth service in us-west-2
  stage: ${opt:stage, 'dev'}
  memorySize: 256
  timeout: 15
  httpApi:
    cors: false  # dynamic CORS handled in Lambda
  environment:
    # ---- CORS
    ALLOWED_ORIGINS: https://beta.mylg.studio,https://mylg.studio,http://localhost:3000
    CORS_WILDCARD_HOSTS: mylg.studio
    CORS_ALLOW_CREDENTIALS: "false"
    CORS_DEFAULT_ORIGIN: https://beta.mylg.studio
    # ---- Users & invites
    USER_PROFILES_TABLE: UserProfiles
    # ---- Cognito (using CloudFormation references)
    COGNITO_USER_POOL_ID: !Ref CognitoUserPool
    COGNITO_USER_POOL_NAME: mylg-dev-users-west2
    COGNITO_USER_CLIENT_ID: !Ref CognitoUserPoolClient

  iam:
    role:
      statements:
        # preTokenGeneration only needs to read UserProfiles
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:BatchGetItem
            - dynamodb:Query
            - dynamodb:DescribeTable
          Resource:
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.env.USER_PROFILES_TABLE}
        - Effect: Allow
          Action:
            - cognito-idp:InitiateAuth
            - cognito-idp:AdminListGroupsForUser
            - cognito-idp:AdminAddUserToGroup
            - cognito-idp:AdminRemoveUserFromGroup
          Resource:
            - arn:aws:cognito-idp:${aws:region}:${aws:accountId}:userpool/${env:COGNITO_USER_POOL_ID}

functions:
  # 1) Cognito Pre-Token Generation (adds role/claims)
  preTokenGeneration:
    handler: triggers/preTokenGeneration.handler
    events:
      - cognitoUserPool:
          # Bind to the user pool created in this stack
          pool: ${self:provider.environment.COGNITO_USER_POOL_NAME}
          trigger: PreTokenGeneration
          existing: false  # Create new pool

  # 2) Lambda authorizer used by the **WebSocket $connect** route (deployed here, *referenced* by ws stack)
  cognitoAuthorizer:
    handler: triggers/cognitoAuthorizer.handler
    environment:
      COGNITO_POOL_ID: ${self:provider.environment.COGNITO_USER_POOL_ID}
      COGNITO_CLIENT_ID: ${self:provider.environment.COGNITO_USER_CLIENT_ID}

  refreshToken:
    handler: routes/refreshToken.handler
    layers:
      - ${cf:shared-layer-${sls:stage}.SharedUtilsLayerArn}
    events:
      - httpApi:
          path: /auth/refresh-token
          method: POST

  updateRoles:
    handler: routes/updateRoles.handler
    layers:
      - ${cf:shared-layer-${sls:stage}.SharedUtilsLayerArn}
    events:
      - httpApi:
          path: /auth/update-roles
          method: POST

package:
  patterns:
    - triggers/**
    - routes/**
    - '!**/*.map'
    - '!node_modules/.bin/**'

resources:
  Resources:
    # Create new Cognito User Pool in us-west-2
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.environment.COGNITO_USER_POOL_NAME}
        AliasAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
        Schema:
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: true

    # Create User Pool Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-client
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        TokenValidityUnits:
          AccessToken: hours
          IdToken: hours
          RefreshToken: days
        AccessTokenValidity: 1
        IdTokenValidity: 1
        RefreshTokenValidity: 30

  Outputs:
    # Cognito User Pool outputs
    CognitoUserPoolId:
      Value:
        Ref: CognitoUserPool
      Export:
        Name: auth-cognito-user-pool-id-${sls:stage}

    CognitoUserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
      Export:
        Name: auth-cognito-user-pool-client-id-${sls:stage}

    CognitoUserPoolArn:
      Value:
        Fn::GetAtt: [ CognitoUserPool, Arn ]
      Export:
        Name: auth-cognito-user-pool-arn-${sls:stage}

    # Lambda function outputs
    PreTokenGenerationArn:
      Value:
        Fn::GetAtt: [ PreTokenGenerationLambdaFunction, Arn ]
      Export:
        Name: auth-preTokenGeneration-arn-${sls:stage}

    CognitoAuthorizerArn:
      Value:
        Fn::GetAtt: [ CognitoAuthorizerLambdaFunction, Arn ]
      Export:
        Name: auth-cognitoAuthorizer-arn-${sls:stage}
