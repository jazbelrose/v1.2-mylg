service: auth
frameworkVersion: '3'

useDotenv: true

custom:
  env: ${file(../serverless.common.yml):env}

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-2  # Auth service in us-west-2
  stage: ${opt:stage, 'dev'}
  memorySize: 256
  timeout: 15
  httpApi:
    cors: true
  environment:
    # ---- CORS
    ALLOWED_ORIGINS: https://beta.mylg.studio,https://mylg.studio,http://localhost:3000
    CORS_WILDCARD_HOSTS: mylg.studio
    CORS_ALLOW_CREDENTIALS: "false"
    CORS_DEFAULT_ORIGIN: https://beta.mylg.studio
    # ---- Users & invites
    USER_PROFILES_TABLE: UserProfiles
    # ---- Cognito (using existing us-west-2 user pool)
    COGNITO_USER_POOL_ID: us-west-2_EmStQTtG1
    COGNITO_USER_POOL_NAME: mylg-dev-users-west2
    COGNITO_USER_CLIENT_ID: 6f5f1vsm5bejjaffihc3e0n95k

  iam:
    role:
      statements:
        # preTokenGeneration only needs to read UserProfiles
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:BatchGetItem
            - dynamodb:Query
            - dynamodb:DescribeTable
          Resource:
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.env.USER_PROFILES_TABLE}
        - Effect: Allow
          Action:
            - cognito-idp:InitiateAuth
            - cognito-idp:AdminListGroupsForUser
            - cognito-idp:AdminAddUserToGroup
            - cognito-idp:AdminRemoveUserFromGroup
          Resource:
            - arn:aws:cognito-idp:us-west-2:221025630675:userpool/us-west-2_EmStQTtG1

functions:
  # 1) Cognito Pre-Token Generation (adds role/claims)
  preTokenGeneration:
    handler: preTokenGeneration.handler
    events:
      - cognitoUserPool:
          # Bind to existing user pool
          pool: mylg-dev-users-west2
          trigger: PreTokenGeneration
          existing: true  # Use existing pool

  # 2) Lambda authorizer used by the **WebSocket $connect** route (deployed here, *referenced* by ws stack)
  cognitoAuthorizer:
    handler: cognitoAuthorizer.handler
    environment:
      COGNITO_POOL_ID: ${self:provider.environment.COGNITO_USER_POOL_ID}
      COGNITO_CLIENT_ID: ${self:provider.environment.COGNITO_USER_CLIENT_ID}

  refreshToken:
    handler: refreshToken.handler
    layers:
      - ${cf:shared-layer-${sls:stage}.SharedUtilsLayerArn}
    events:
      - httpApi:
          path: /auth/refresh-token
          method: POST

  updateRoles:
    handler: updateRoles.handler
    layers:
      - ${cf:shared-layer-${sls:stage}.SharedUtilsLayerArn}
    events:
      - httpApi:
          path: /auth/update-roles
          method: POST

package:
  patterns:
    - '*.mjs'
    - '!**/*.map'
    - '!node_modules/.bin/**'
