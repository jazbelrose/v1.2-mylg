{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "MessagesRouterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/messages-dev-messagesRouter"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "messages",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/messages-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/messages-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchGetItem",
                    "dynamodb:Query",
                    "dynamodb:Scan"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:us-west-2:221025630675:table/Inbox",
                    "arn:aws:dynamodb:us-west-2:221025630675:table/Messages",
                    "arn:aws:dynamodb:us-west-2:221025630675:table/Messages/index/*",
                    "arn:aws:dynamodb:us-west-2:221025630675:table/ProjectMessages",
                    "arn:aws:dynamodb:us-west-2:221025630675:table/Notifications",
                    "arn:aws:dynamodb:us-west-2:221025630675:table/Notifications/index/*"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "messages",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "MessagesRouterLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/messages/dev/1757542629598-2025-09-10T22:17:09.598Z/messages.zip"
        },
        "Handler": "src/router.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "messages-dev-messagesRouter",
        "MemorySize": 256,
        "Timeout": 15,
        "Environment": {
          "Variables": {
            "ALLOWED_ORIGINS": "https://beta.mylg.studio,https://mylg.studio,http://localhost:3000",
            "CORS_WILDCARD_HOSTS": "mylg.studio",
            "CORS_ALLOW_CREDENTIALS": "false",
            "CORS_DEFAULT_ORIGIN": "https://beta.mylg.studio",
            "USER_PROFILES_TABLE": "UserProfiles",
            "INVITES_TABLE": "ProjectInvitations",
            "INVITES_BY_SENDER_INDEX": "senderId-index",
            "INVITES_BY_RECIPIENT_INDEX": "recipientId-index",
            "INBOX_TABLE": "Inbox",
            "MESSAGES_TABLE": "Messages",
            "PROJECT_MESSAGES_TABLE": "ProjectMessages",
            "NOTIFICATIONS_TABLE": "Notifications",
            "NOTIFICATIONS_BY_USER_INDEX": "userId-index",
            "PROJECTS_TABLE": "Projects",
            "TASKS_TABLE": "Tasks",
            "EVENTS_TABLE": "Events",
            "EVENTS_STARTAT_INDEX": "",
            "BUDGETS_TABLE": "Budgets",
            "BUDGET_ID_INDEX": "budgetId-index",
            "BUDGET_ITEM_ID_INDEX": "budgetItemId-index",
            "GALLERIES_TABLE": "Galleries",
            "GALLERIES_PROJECT_GSI": "projectId-index",
            "CONNECTIONS_TABLE": "Connections",
            "CONNECTIONS_USER_GSI": "userId-sessionId-index",
            "COGNITO_USER_POOL_ID": "placeholder",
            "COGNITO_USER_POOL_NAME": "mylg-dev-users-west2",
            "COGNITO_USER_CLIENT_ID": "placeholder",
            "SCANS_ALLOWED": "false"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-west-2:221025630675:layer:shared-utils:2"
        ]
      },
      "DependsOn": [
        "MessagesRouterLogGroup"
      ]
    },
    "MessagesRouterLambdaVersioneXQI7Y62lWzchjZ23cAWIY3t7ERYLa0ULKSj5fh6RiE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MessagesRouterLambdaFunction"
        },
        "CodeSha256": "HQtsOE06A0dkupiSJXi3P2RPrDftMA4OzFmlJ1sDLso="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-messages",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "MessagesRouterLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MessagesRouterLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationMessagesRouter": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "MessagesRouterLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteAnyMessages": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "ANY /messages",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationMessagesRouter"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationMessagesRouter"
    },
    "HttpApiRouteAnyMessagesProxyVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "ANY /messages/{proxy+}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationMessagesRouter"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationMessagesRouter"
    },
    "HttpApiRouteAnyMessagesHealth": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "ANY /messages/health",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationMessagesRouter"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationMessagesRouter"
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-messages-dev-ServerlessDeploymentBucketName"
      }
    },
    "MessagesRouterLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MessagesRouterLambdaVersioneXQI7Y62lWzchjZ23cAWIY3t7ERYLa0ULKSj5fh6RiE"
      },
      "Export": {
        "Name": "sls-messages-dev-MessagesRouterLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-messages-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-messages-dev-HttpApiUrl"
      }
    }
  }
}