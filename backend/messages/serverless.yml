service: messages
frameworkVersion: '3'

custom:
  app: mylg
  ver: v12
  stage: ${opt:stage, 'dev'}

  tables:
    USERS_PROFILES:           ${self:custom.app}-${self:custom.ver}-users-profiles-${self:custom.stage}
    USERS_INVITES:            ${self:custom.app}-${self:custom.ver}-users-invites-${self:custom.stage}

    MSG_THREADS:              ${self:custom.app}-${self:custom.ver}-messages-threads-${self:custom.stage}
    MSG_ITEMS:                ${self:custom.app}-${self:custom.ver}-messages-items-${self:custom.stage}
    MSG_PROJECT:              ${self:custom.app}-${self:custom.ver}-projects-messages-${self:custom.stage}
    NOTIFICATIONS:            ${self:custom.app}-${self:custom.ver}-notifications-${self:custom.stage}

    PROJ_CORE:                ${self:custom.app}-${self:custom.ver}-projects-core-${self:custom.stage}
    PROJ_TASKS:               ${self:custom.app}-${self:custom.ver}-projects-tasks-${self:custom.stage}
    PROJ_EVENTS:              ${self:custom.app}-${self:custom.ver}-projects-events-${self:custom.stage}
    PROJ_BUDGETS:             ${self:custom.app}-${self:custom.ver}-projects-budgets-${self:custom.stage}
    GALLERIES:                ${self:custom.app}-${self:custom.ver}-galleries-${self:custom.stage}

    WS_CONNECTIONS:           Connections

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-2
  stage: ${self:custom.stage}
  memorySize: 256
  timeout: 15
  httpApi:
    cors: false  # dynamic CORS in Lambda
  environment:
    # CORS (read by /opt layer)
    ALLOWED_ORIGINS: https://beta.mylg.studio,https://mylg.studio,http://localhost:3000
    CORS_WILDCARD_HOSTS: mylg.studio
    CORS_ALLOW_CREDENTIALS: "false"

    # Tables / indexes used by the router (MUST be inside environment)
    THREADS_TABLE:           ${self:custom.tables.MSG_THREADS}
    MESSAGES_TABLE:          ${self:custom.tables.MSG_ITEMS}
    MESSAGES_BY_ID_INDEX:    messageId-index
    PROJECT_MESSAGES_TABLE:  ${self:custom.tables.MSG_PROJECT}
    NOTIFICATIONS_TABLE:     ${self:custom.tables.NOTIFICATIONS}
    NOTIFICATIONS_BY_USER_INDEX:  userId-index

    # dev safety toggle (router expects a string)
    SCANS_ALLOWED: "false"

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            # Threads
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${env:THREADS_TABLE}

            # Messages + GSIs (messageId-index)
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${env:MESSAGES_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${env:MESSAGES_TABLE}/index/*

            # Project-scoped messages
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${env:PROJECT_MESSAGES_TABLE}

            # Notifications (+ optional index)
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${env:NOTIFICATIONS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${env:NOTIFICATIONS_TABLE}/index/*

functions:
  messagesRouter:
    # adjust if your file is not under src/
    handler: src/router.handler
    layers:
      - ${cf:shared-layer-${sls:stage}.SharedUtilsLayerArn}
    events:
      - httpApi:
          path: /messages
          method: ANY
      - httpApi:
          path: /messages/{proxy+}
          method: ANY
      - httpApi:
          path: /messages/health
          method: ANY

package:
  patterns:
    - src/**
    - '!node_modules/.bin/**'
    - '!**/*.map'
