service: projects
frameworkVersion: '3'

custom: ${file(../serverless.common.yml):custom}

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-2
  stage: ${self:custom.stage}
  memorySize: 256
  timeout: 15
  stackName: ${self:custom.app}-${self:custom.ver}-${self:service}-${self:custom.stage}
  httpApi:
    cors: false  # dynamic CORS handled in Lambda
    name: ${self:custom.app}-${self:custom.ver}-${self:service}-api-${self:custom.stage}
  tags:
    App: MYLG
    Version: v1.2
    Domain: projects
    Stage: ${self:custom.stage}
  environment:
    # CORS (layer reads these)
    ALLOWED_ORIGINS: https://beta.mylg.studio,https://mylg.studio,http://localhost:3000
    CORS_WILDCARD_HOSTS: mylg.studio
    CORS_ALLOW_CREDENTIALS: "false"

    # Projects domain tables
    PROJECTS_TABLE:           ${self:custom.tables.PROJ_CORE}
    TASKS_TABLE:              ${self:custom.tables.PROJ_TASKS}
    EVENTS_TABLE:             ${self:custom.tables.PROJ_EVENTS}
    EVENTS_STARTAT_INDEX:     projectId-startAt-index

    # Budgets (v1.1 semantics under /projects/{id}/budget*)
    BUDGETS_TABLE:            ${self:custom.tables.PROJ_BUDGETS}
    BUDGET_ID_INDEX:          budgetId-index
    BUDGET_ITEM_ID_INDEX:     budgetItemId-index

    # Galleries (v1.1 table: PK=galleryId, GSI on projectId)
    GALLERIES_TABLE:          ${self:custom.tables.GALLERIES}
    GALLERIES_BY_PROJECT_INDEX: projectId-index

    # safer default; flip to "true" if you want dev scans
    SCANS_ALLOWED: "false"

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            # Projects core
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.tables.PROJ_CORE}

            # Tasks
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.tables.PROJ_TASKS}

            # Events (+ optional startAt GSI)
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.tables.PROJ_EVENTS}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.tables.PROJ_EVENTS}/index/*

            # Budgets (+ GSIs for budgetId and budgetItemId)
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.tables.PROJ_BUDGETS}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.tables.PROJ_BUDGETS}/index/*

            # Galleries (+ projectId GSI)
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.GALLERIES_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.GALLERIES_TABLE}/index/*

functions:
  projectsRouter:
    name: ${self:custom.app}-${self:custom.ver}-projects-router-${self:custom.stage}
    # NOTE: point this to where your file actually lives.
    # If the file is backend/projects/router.mjs at the service root, use "router.handler".
    # If it's in src/router.mjs, keep "src/router.handler".
    handler: router.handler
    layers:
      - ${cf:shared-layer-${sls:stage}.SharedUtilsLayerArn}
    events:
      - httpApi:
          path: /projects
          method: ANY
      - httpApi:
          path: /projects/{proxy+}
          method: ANY
      - httpApi:
          path: /projects/health
          method: ANY
      # include this only if you enabled the convenience routes /budgets/by*
      - httpApi:
          path: /budgets/{proxy+}
          method: ANY

package:
  patterns:
    # include the router + anything it imports (node_modules auto-included)
    - router.mjs
    - '!**/*.map'
    - '!node_modules/.bin/**'
