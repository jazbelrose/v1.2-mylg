service: users
frameworkVersion: '3'

custom: ${file(../serverless.common.yml):custom}

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-2
  stage: ${self:custom.stage}
  memorySize: 256
  timeout: 15
  httpApi:
    cors: false   # dynamic CORS handled in /opt/nodejs/utils/cors.mjs
  environment:
    # CORS (read by the shared layer)
    ALLOWED_ORIGINS: https://beta.mylg.studio,https://mylg.studio,http://localhost:3000
    CORS_WILDCARD_HOSTS: mylg.studio
    CORS_ALLOW_CREDENTIALS: "false"

    # Users domain tables / indexes
    USER_PROFILES_TABLE:        ${self:custom.tables.USERS_PROFILES}
    INVITES_TABLE:              ${self:custom.tables.USERS_INVITES}
    INVITES_BY_SENDER_INDEX:    senderId-index
    INVITES_BY_RECIPIENT_INDEX: recipientId-index

    # Dev toggle the router reads as a string
    SCANS_ALLOWED: ${env:SCANS_ALLOWED, 'false'}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.USER_PROFILES_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.INVITES_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.INVITES_TABLE}/index/*

functions:
  usersRouter:
    # adjust if your file path differs (e.g., router.mjs at the service root)
    handler: users/router.handler
    layers:
      - ${cf:shared-layer-${sls:stage}.SharedUtilsLayerArn}
    events:
      # If this service has its own API endpoint, you can replace the block below
      # with a single catch-all: path: /{proxy+}
      - httpApi:
          path: /userProfiles
          method: ANY
      - httpApi:
          path: /userProfiles/{proxy+}
          method: ANY
      - httpApi:
          path: /userProfilesPending/{proxy+}
          method: ANY
      - httpApi:
          path: /invites/{proxy+}
          method: ANY
      - httpApi:
          path: /sendProjectInvitation
          method: ANY
      - httpApi:
          path: /postProjectToUserId
          method: ANY
      - httpApi:
          path: /user/health
          method: ANY

package:
  patterns:
    - users/**        # include router + helpers under users/
    - '!**/*.map'
    - '!node_modules/.bin/**'
