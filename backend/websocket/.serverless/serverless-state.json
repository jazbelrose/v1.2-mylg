{
  "service": {
    "service": "mylg-v2-websocket",
    "serviceObject": {
      "name": "mylg-v2-websocket"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-west-2",
      "stage": "dev",
      "memorySize": 256,
      "timeout": 15,
      "environment": {
        "ALLOWED_ORIGINS": "https://beta.mylg.studio,https://mylg.studio,http://localhost:3000",
        "CORS_WILDCARD_HOSTS": "mylg.studio",
        "CORS_ALLOW_CREDENTIALS": "false",
        "CORS_DEFAULT_ORIGIN": "https://beta.mylg.studio",
        "CONNECTIONS_TABLE": "Connections",
        "CONNECTIONS_USER_GSI": "userId-sessionId-index",
        "USER_PROFILES_TABLE": "UserProfiles",
        "INBOX_TABLE": "Inbox",
        "NOTIFICATIONS_TABLE": "Notifications",
        "WEBSOCKET_ENDPOINT": "wss://placeholder.execute-api.us-west-2.amazonaws.com/dev"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem"
              ],
              "Resource": [
                "arn:aws:dynamodb:us-west-2:221025630675:table/Connections",
                "arn:aws:dynamodb:us-west-2:221025630675:table/Connections/index/*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "execute-api:ManageConnections"
              ],
              "Resource": "arn:aws:execute-api:us-west-2:221025630675:*/dev/POST/@connections/*"
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "OnConnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/mylg-v2-websocket-dev-onConnect"
            }
          },
          "OnDisconnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/mylg-v2-websocket-dev-onDisconnect"
            }
          },
          "OnDefaultLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/mylg-v2-websocket-dev-onDefault"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "mylg-v2-websocket",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mylg-v2-websocket-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mylg-v2-websocket-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "mylg-v2-websocket",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "OnConnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/mylg-v2-websocket/dev/1757539336356-2025-09-10T21:22:16.356Z/mylg-v2-websocket.zip"
              },
              "Handler": "onConnect.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "mylg-v2-websocket-dev-onConnect",
              "MemorySize": 256,
              "Timeout": 15,
              "Environment": {
                "Variables": {
                  "ALLOWED_ORIGINS": "https://beta.mylg.studio,https://mylg.studio,http://localhost:3000",
                  "CORS_WILDCARD_HOSTS": "mylg.studio",
                  "CORS_ALLOW_CREDENTIALS": "false",
                  "CORS_DEFAULT_ORIGIN": "https://beta.mylg.studio",
                  "CONNECTIONS_TABLE": "Connections",
                  "CONNECTIONS_USER_GSI": "userId-sessionId-index",
                  "USER_PROFILES_TABLE": "UserProfiles",
                  "INBOX_TABLE": "Inbox",
                  "NOTIFICATIONS_TABLE": "Notifications",
                  "WEBSOCKET_ENDPOINT": "wss://placeholder.execute-api.us-west-2.amazonaws.com/dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "OnConnectLogGroup"
            ]
          },
          "OnDisconnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/mylg-v2-websocket/dev/1757539336356-2025-09-10T21:22:16.356Z/mylg-v2-websocket.zip"
              },
              "Handler": "onDisconnect.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "mylg-v2-websocket-dev-onDisconnect",
              "MemorySize": 256,
              "Timeout": 15,
              "Environment": {
                "Variables": {
                  "ALLOWED_ORIGINS": "https://beta.mylg.studio,https://mylg.studio,http://localhost:3000",
                  "CORS_WILDCARD_HOSTS": "mylg.studio",
                  "CORS_ALLOW_CREDENTIALS": "false",
                  "CORS_DEFAULT_ORIGIN": "https://beta.mylg.studio",
                  "CONNECTIONS_TABLE": "Connections",
                  "CONNECTIONS_USER_GSI": "userId-sessionId-index",
                  "USER_PROFILES_TABLE": "UserProfiles",
                  "INBOX_TABLE": "Inbox",
                  "NOTIFICATIONS_TABLE": "Notifications",
                  "WEBSOCKET_ENDPOINT": "wss://placeholder.execute-api.us-west-2.amazonaws.com/dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "OnDisconnectLogGroup"
            ]
          },
          "OnDefaultLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/mylg-v2-websocket/dev/1757539336356-2025-09-10T21:22:16.356Z/mylg-v2-websocket.zip"
              },
              "Handler": "default.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "mylg-v2-websocket-dev-onDefault",
              "MemorySize": 256,
              "Timeout": 15,
              "Environment": {
                "Variables": {
                  "ALLOWED_ORIGINS": "https://beta.mylg.studio,https://mylg.studio,http://localhost:3000",
                  "CORS_WILDCARD_HOSTS": "mylg.studio",
                  "CORS_ALLOW_CREDENTIALS": "false",
                  "CORS_DEFAULT_ORIGIN": "https://beta.mylg.studio",
                  "CONNECTIONS_TABLE": "Connections",
                  "CONNECTIONS_USER_GSI": "userId-sessionId-index",
                  "USER_PROFILES_TABLE": "UserProfiles",
                  "INBOX_TABLE": "Inbox",
                  "NOTIFICATIONS_TABLE": "Notifications",
                  "WEBSOCKET_ENDPOINT": "wss://placeholder.execute-api.us-west-2.amazonaws.com/dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "OnDefaultLogGroup"
            ]
          },
          "OnConnectLambdaVersion7zCWUZfKOGPjNs7yiNTz0muut30N042YBrNCZiBRaEY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OnConnectLambdaFunction"
              },
              "CodeSha256": "jVePe63PhGp7/3MNU5aG8hDpqYh7qE9lY/n+F+UMiz0="
            }
          },
          "OnDisconnectLambdaVersionGqfc2ZWrklXNH1VLDnEa6GNSRjkzV5V06kuYH9bO8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OnDisconnectLambdaFunction"
              },
              "CodeSha256": "jVePe63PhGp7/3MNU5aG8hDpqYh7qE9lY/n+F+UMiz0="
            }
          },
          "OnDefaultLambdaVersionR7TaD9G5O1hE29i2cCH2HNRiAjjR6inQGqGDXtM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OnDefaultLambdaFunction"
              },
              "CodeSha256": "jVePe63PhGp7/3MNU5aG8hDpqYh7qE9lY/n+F+UMiz0="
            }
          },
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-mylg-v2-websocket-websockets",
              "RouteSelectionExpression": "$request.body.action",
              "Description": "Serverless Websockets",
              "ProtocolType": "WEBSOCKET"
            }
          },
          "OnConnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "OnConnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "OnDisconnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "OnDisconnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "OnDefaultWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "OnDefaultLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "OnConnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "OnConnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "OnConnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "OnDisconnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "OnDisconnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "OnDisconnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "OnDefaultLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "OnDefaultLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "OnDefaultLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$connect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "OnConnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdisconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$disconnect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "OnDisconnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdefaultWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$default",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "OnDefaultWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "WebsocketsDeploymentStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "StageName": "dev",
              "Description": "Serverless Websockets",
              "DeploymentId": {
                "Ref": "WebsocketsDeployment2JgXr7egHvxIDu6UaiPV6YqAQlWHHSenbmuB1rhCSE"
              }
            }
          },
          "WebsocketsDeployment2JgXr7egHvxIDu6UaiPV6YqAQlWHHSenbmuB1rhCSE": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": [
              "SconnectWebsocketsRoute",
              "SdisconnectWebsocketsRoute",
              "SdefaultWebsocketsRoute"
            ],
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "Description": "Serverless Websockets"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-mylg-v2-websocket-dev-ServerlessDeploymentBucketName"
            }
          },
          "OnConnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OnConnectLambdaVersion7zCWUZfKOGPjNs7yiNTz0muut30N042YBrNCZiBRaEY"
            },
            "Export": {
              "Name": "sls-mylg-v2-websocket-dev-OnConnectLambdaFunctionQualifiedArn"
            }
          },
          "OnDisconnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OnDisconnectLambdaVersionGqfc2ZWrklXNH1VLDnEa6GNSRjkzV5V06kuYH9bO8"
            },
            "Export": {
              "Name": "sls-mylg-v2-websocket-dev-OnDisconnectLambdaFunctionQualifiedArn"
            }
          },
          "OnDefaultLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OnDefaultLambdaVersionR7TaD9G5O1hE29i2cCH2HNRiAjjR6inQGqGDXtM"
            },
            "Export": {
              "Name": "sls-mylg-v2-websocket-dev-OnDefaultLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpointWebsocket": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "wss://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-mylg-v2-websocket-dev-ServiceEndpointWebsocket"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "env": {
        "ALLOWED_ORIGINS": "https://beta.mylg.studio,https://mylg.studio,http://localhost:3000",
        "CORS_WILDCARD_HOSTS": "mylg.studio",
        "CORS_ALLOW_CREDENTIALS": "false",
        "CORS_DEFAULT_ORIGIN": "https://beta.mylg.studio",
        "USER_PROFILES_TABLE": "UserProfiles",
        "INVITES_TABLE": "ProjectInvitations",
        "INVITES_BY_SENDER_INDEX": "senderId-index",
        "INVITES_BY_RECIPIENT_INDEX": "recipientId-index",
        "INBOX_TABLE": "Inbox",
        "MESSAGES_TABLE": "Messages",
        "PROJECT_MESSAGES_TABLE": "ProjectMessages",
        "NOTIFICATIONS_TABLE": "Notifications",
        "NOTIFICATIONS_BY_USER_INDEX": "userId-index",
        "PROJECTS_TABLE": "Projects",
        "TASKS_TABLE": "Tasks",
        "EVENTS_TABLE": "Events",
        "EVENTS_STARTAT_INDEX": "",
        "BUDGETS_TABLE": "Budgets",
        "BUDGET_ID_INDEX": "budgetId-index",
        "BUDGET_ITEM_ID_INDEX": "budgetItemId-index",
        "GALLERIES_TABLE": "Galleries",
        "GALLERIES_PROJECT_GSI": "projectId-index",
        "CONNECTIONS_TABLE": "Connections",
        "CONNECTIONS_USER_GSI": "userId-sessionId-index",
        "COGNITO_USER_POOL_ID": "placeholder",
        "COGNITO_USER_POOL_NAME": "mylg-dev-users-west2",
        "COGNITO_USER_CLIENT_ID": "placeholder",
        "SCANS_ALLOWED": "false"
      }
    },
    "pluginsData": {},
    "functions": {
      "onConnect": {
        "handler": "onConnect.handler",
        "events": [
          {
            "websocket": {
              "route": "$connect"
            }
          }
        ],
        "name": "mylg-v2-websocket-dev-onConnect",
        "package": {},
        "memory": 256,
        "timeout": 15,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "OnConnectLambdaVersion7zCWUZfKOGPjNs7yiNTz0muut30N042YBrNCZiBRaEY"
      },
      "onDisconnect": {
        "handler": "onDisconnect.handler",
        "events": [
          {
            "websocket": {
              "route": "$disconnect"
            }
          }
        ],
        "name": "mylg-v2-websocket-dev-onDisconnect",
        "package": {},
        "memory": 256,
        "timeout": 15,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "OnDisconnectLambdaVersionGqfc2ZWrklXNH1VLDnEa6GNSRjkzV5V06kuYH9bO8"
      },
      "onDefault": {
        "handler": "default.handler",
        "events": [
          {
            "websocket": {
              "route": "$default"
            }
          }
        ],
        "name": "mylg-v2-websocket-dev-onDefault",
        "package": {},
        "memory": 256,
        "timeout": 15,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "OnDefaultLambdaVersionR7TaD9G5O1hE29i2cCH2HNRiAjjR6inQGqGDXtM"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "mylg-v2-websocket",
      "frameworkVersion": "3",
      "useDotenv": true,
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "package": {
        "patterns": [
          "*.mjs",
          "!**/*.map"
        ],
        "artifactsS3KeyDirname": "serverless/mylg-v2-websocket/dev/code-artifacts",
        "artifact": "D:\\MYLG\\App\\v1.2-mylg\\backend\\websocket\\.serverless\\mylg-v2-websocket.zip",
        "artifactDirectoryName": "serverless/mylg-v2-websocket/dev/1757539336356-2025-09-10T21:22:16.356Z"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "D:\\MYLG\\App\\v1.2-mylg\\backend\\websocket\\.serverless\\mylg-v2-websocket.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/mylg-v2-websocket/dev/1757539336356-2025-09-10T21:22:16.356Z",
    "artifact": "mylg-v2-websocket.zip"
  }
}