service: mylg-v2-websocket
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-2
  stage: ${opt:stage, 'dev'}
  memorySize: 256
  timeout: 15
  environment:
    # DynamoDB
    CONNECTIONS_TABLE: Connections                   # ← your table name
    CONNECTIONS_USER_GSI: userId-sessionId-index     # ← GSI used in code
    # WebSocket Management API endpoint (HTTPS domain + stage)
    # Example: https://abc123.execute-api.us-west-2.amazonaws.com/dev
    WEBSOCKET_ENDPOINT: ${env:WEBSOCKET_ENDPOINT}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:BatchWriteItem
          Resource:
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/Connections
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/Connections/index/*
        - Effect: Allow
          Action:
            - execute-api:ManageConnections
          Resource: "arn:aws:execute-api:${aws:region}:${aws:accountId}:*/${sls:stage}/POST/@connections/*"

functions:
  onConnect:
    handler: websocket/onConnect.handler
    events:
      - websocket:
          route: $connect
  onDisconnect:
    handler: websocket/onDisconnect.handler
    events:
      - websocket:
          route: $disconnect
  onDefault:
    handler: websocket/default.handler
    events:
      - websocket:
          route: $default
  sendMessage:        # optional custom route used by your default code paths
    handler: websocket/default.handler
    events:
      - websocket:
          route: sendMessage

package:
  patterns:
    - websocket/**
    - '!**/*.map'
